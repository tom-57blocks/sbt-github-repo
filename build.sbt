ThisBuild / organization := "xyz.jia.scala"
ThisBuild / versionScheme := Some("early-semver")
ThisBuild / scalaVersion := Versions.scala

// Silence all warnings on autogenerated files from plugins such as Play!
ThisBuild / scalacOptions += s"-Wconf:src=${target.value}/.*:s"

// Set up sbt credentials based on how product is run
//ThisBuild / credentials += {
//  (sys.env.get("ARTIFACTORY_USER"), sys.env.get("ARTIFACTORY_PASSWORD")) match {
//    case (Some(user), Some(password)) =>
//      // for Docker
//      Credentials("Artifactory Realm", "jia.jfrog.io", user, password)
//    case _ =>
//      // For local setup
//      Credentials(Path.userHome / ".ivy2" / ".credentials")
//  }
//}

ThisBuild / resolvers ++= Seq(
  "Typesafe repository".at("https://repo.typesafe.com/typesafe/releases/"),
  "Confluent Maven Repository".at("https://packages.confluent.io/maven/")

)
//resolvers += Resolver.githubPackages("abankowski")

//ThisBuild / publishTo := {
//  val parentUrl = "https://jia.jfrog.io/artifactory"
//  if (isSnapshot.value) {
//    Some("snapshots".at(s"$parentUrl/maven-snapshot-local"))
//  } else {
//    Some("releases".at(s"$parentUrl/maven-release-local"))
//  }
//}

ThisBuild / publishTo := Some("GitHub tom-57blocks Apache Maven Packages" at "https://maven.pkg.github.com/tom-57blocks/sbt-github-repo")
ThisBuild / credentials += Credentials(
  "GitHub Package Registry",
  "maven.pkg.github.com",
  "tom-57blocks",
  System.getenv("GITHUB_TOKEN")
)

// Auto format code using Scalafmt during compilation when not running in CI environments
ThisBuild / scalafmtOnCompile := !sys.env.contains("CI")

ThisBuild / Test / javaOptions += "-Dlogger.resource=logback-test.xml"

// Ignore play-test module from coverage report
ThisBuild / coverageExcludedPackages := Seq(
  "xyz.jia.scala.commons.test.*",
  "xyz.jia.scala.commons.messaging.play.kafka.AvroConsumerInitModule",
  "xyz.jia.scala.commons.messaging.play.kafka.AvroStreamsInitializer",
  "xyz.jia.scala.commons.messaging.play.kafka.ConsumerInitModule",
  "xyz.jia.scala.commons.messaging.play.kafka.StreamsInitializer",
  "xyz.jia.scala.commons.messaging.kafka.AvroConsumer",
  "xyz.jia.scala.commons.messaging.kafka.ConsumerConfigKeys.*",
  "xyz.jia.scala.commons.messaging.kafka.GenericConsumer",
  "xyz.jia.scala.commons.messaging.play.avro.JsValueCodec",
  "xyz.jia.scala.commons.messaging.kafka.MessageProcessor",
  "xyz.jia.scala.commons.messaging.play.kafka.PlayBasedMessageProcessor"
).mkString(";")

lazy val root = (project in file("."))
  .settings(
    name := "tools-common",
    libraryDependencies ++= Seq(
    )
  )
  .aggregate(utils, messaging, playMessaging, playUtils, playDatasource, playTest)

lazy val utils = (project in file("utils"))
  .settings(
    name := "common-utils",
    libraryDependencies ++= Common.dependencies,
    libraryDependencies += "commons-codec" % "commons-codec" % Versions.apacheCommonsCodec
  )

lazy val messaging = (project in file("messaging"))
  .settings(
    name := "common-messaging",
    libraryDependencies ++= Common.dependencies,
    libraryDependencies ++= Seq(
      "com.sksamuel.avro4s" %% "avro4s-core" % Versions.avro4s % Test,
      "com.typesafe.akka" %% "akka-actor-testkit-typed" % Versions.akkaTestKit % Test,
      "com.typesafe.akka" %% "akka-serialization-jackson" % Versions.akkaTestKit % Test,
      "com.typesafe.akka" %% "akka-stream-kafka" % Versions.akkaStreamKafka,
      "io.confluent" % "kafka-avro-serializer" % Versions.kafkaAvroSerializer
    )
  )
  .aggregate(utils)
  .dependsOn(utils)

lazy val playMessaging = (project in file("play-messaging"))
  .settings(
    name := "common-play-messaging",
    test / aggregate := false,
    libraryDependencies ++= Common.dependencies,
    libraryDependencies ++= Seq(
      "com.google.inject" % "guice" % Versions.juice % Provided,
      "com.sksamuel.avro4s" %% "avro4s-core" % Versions.avro4s % Provided,
      "com.typesafe.play" %% "play" % Versions.play % Provided,
      "com.typesafe.play" %% "play-cache" % Versions.play
    )
  )
  .aggregate(utils, messaging, playUtils)
  .dependsOn(utils, messaging, playUtils)

lazy val playUtils = (project in file("play-utils"))
  .settings(
    name := "common-play-utils",
    test / aggregate := false,
    libraryDependencies ++= Common.dependencies,
    libraryDependencies ++= Seq(
      "com.google.inject" % "guice" % Versions.juice % Provided,
      "com.typesafe.play" %% "play" % Versions.play % Provided,
      "com.typesafe.play" %% "play-ws" % Versions.play % Provided,
      "com.typesafe.play" %% "play-akka-http-server" % Versions.play % Provided,
      "com.typesafe.akka" %% "akka-testkit" % Versions.akkaTestKit % Test,
      ("net.logstash.logback" % "logstash-logback-encoder" % Versions.logstashLogbackEncoder)
        .exclude("com.fasterxml.jackson.core", "jackson-databind")
    )
  )
  .aggregate(playTest, utils)
  .dependsOn(playTest % Test, utils)

lazy val playDatasource = (project in file("play-datasource"))
  .settings(
    name := "common-play-datasource",
    test / aggregate := false,
    libraryDependencies ++= Common.dependencies,
    libraryDependencies ++= Seq(
      "com.typesafe.play" %% "play" % Versions.play % Provided,
      "com.typesafe.play" %% "play-slick" % Versions.playSlick % Provided,
      "com.typesafe.play" %% "play-slick-evolutions" % Versions.playSlickEvolutions % Test,
      "mysql" % "mysql-connector-java" % Versions.mysqlConnector % Test
    )
  )
  .aggregate(playTest)
  .dependsOn(playTest % Test)

lazy val playTest = (project in file("play-test"))
  .settings(
    name := "common-play-test",
    test / aggregate := false,
    libraryDependencies ++= Seq(
      "com.typesafe.akka" %% "akka-actor-testkit-typed" % Versions.akkaTestKit,
      "com.typesafe.play" %% "play" % Versions.play % Provided,
      "com.typesafe.play" %% "play-slick" % Versions.playSlick % Provided,
      "com.typesafe.play" %% "play-slick-evolutions" % Versions.playSlickEvolutions % Provided,
      "org.scalatest" %% "scalatest" % Versions.scalaTest % Provided,
      "org.scalatestplus" %% "mockito-3-4" % Versions.scalatestplusMockito % Provided,
      "org.scalatestplus.play" %% "scalatestplus-play" % Versions.scalatestplus % Provided
    )
  )
